if(rp->children.size > 0) {
        // push_back(&stack, &rp);
        // handle_rep(ParamDecl, "ParamDecl", 2,true);
        // rp = pop_node();
        vector ch = flat_children(rp, 2, true);
        rp = new_node_ptr(ParamDecl, "ParamDecl");
        // vector new_children = new_vector(sizeof(ast_ptr));
        ast_ptr type = pop_node();
        ast_ptr id = pop_node();
        // printf("Bii0\n");
        push_back(&(rp->children), &type);
        push_back(&(rp->children), &id);
        push_back(&stack, &rp);

        for(int i = 0; i<ch.size; i++) {
            ast_ptr c = *(ast_ptr*)get(&ch, i);
            printf("Child %d : %s\n", i+1, c->str);
        }
        // printf("Booo %ld \n", ch.size);
        // push_back(&new_children, &type);
        // push_back(&new_children, &id);
        for(int i =0; i< ch.size/2; i++) {
            // ast_ptr t = // new_node_ptr(type->node_type, type->str);
            // printf("%s and %s")
            ast_ptr pd = new_node_ptr(ParamDecl, "ParamDecl");
            push_back(&(pd->children), get(&ch, 2*i));
            push_back(&(pd->children), get(&(ch), 2*i+1));
            ast_ptr a = *(ast_ptr*)get(&(pd->children), 0);
             ast_ptr b = *(ast_ptr*)get(&(pd->children), 1);
            printf("Adding %s %s to stack\n", a->str, b->str);
            push_back(&stack, &pd);
        }
        // rp->children = new_children;
        // push_back(&stack, &rp);
    }