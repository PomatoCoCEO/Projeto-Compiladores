@.str_int = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str_float = private unnamed_addr constant [7 x i8] c"%.08f\0A\00", align 1
@.str_string = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.false = private unnamed_addr constant [7 x i8] c"false\0A\00", align 1
@.true = private unnamed_addr constant [6 x i8] c"true\0A\00", align 1
@.new_line = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@program.args = global i8** null
declare i32 @atoi(i8*)
declare i32 @printf(i8*, ...)
@.str_0 = private unnamed_addr constant [16 x i8] c"This will work\0A\00", align 1
@.str_1 = private unnamed_addr constant [17 x i8] c"This won't work\0A\00", align 1
define i1 @func.d() {
%j = alloca i32
store i32 0, i32* %j
%loop = alloca i1
store i1 0, i1* %loop
%1 = add i32 1, 0
%2 = add i32 1, 0
%3 = icmp eq i32 %1, %2
store i1 %3, i1* %loop
%4 = add i32 1, 0
%5 = add i32 1, 0
%6 = icmp eq i32 %4, %5
br i1 %6, label %then_0, label %else_0
then_0:
call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str_0, i64 0, i64 0))
%8 = add i32 1, 0
%9 = add i32 1, 0
%10 = icmp eq i32 %8, %9
%11 = sub i1 1, %10
br i1 %11, label %then_1, label %else_1
then_1:
call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str_1, i64 0, i64 0))
br label %end_if_1
else_1:
br label %cond_for_0
cond_for_0:
%13 = load i1, i1* %loop
br i1 %13, label %for_body_0, label %for_end_0
for_body_0:
%14 = load i32, i32* %j
call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str_int, i64 0, i64 0), i32 %14)
%16 = load i32, i32* %j
%17 = add i32 1, 0
%18 = add i32 %16, %17
store i32 %18, i32* %j
%19 = load i32, i32* %j
%20 = add i32 10, 0
%21 = icmp sge i32 %19, %20
br i1 %21, label %then_2, label %else_2
then_2:
%22 = load i1, i1* %loop
%23 = sub i1 1, %22
store i1 %23, i1* %loop
br label %end_if_2
else_2:
%24 = load i32, i32* %j
%25 = add i32 10, 0
%26 = add i32 %24, %25
store i32 %26, i32* %j
br label %end_if_2
end_if_2:
br label %cond_for_0
for_end_0:
br label %end_if_1
end_if_1:
br label %end_if_0
else_0:
br label %end_if_0
end_if_0:
ret i1 0}
@.str_2 = private unnamed_addr constant [11 x i8] c"7 is even\0A\00", align 1
@.str_3 = private unnamed_addr constant [10 x i8] c"7 is odd\0A\00", align 1
@.str_4 = private unnamed_addr constant [21 x i8] c"8 is divisible by 4\0A\00", align 1
@.str_5 = private unnamed_addr constant [13 x i8] c"is negative\0A\00", align 1
@.str_6 = private unnamed_addr constant [13 x i8] c"has 1 digit\0A\00", align 1
@.str_7 = private unnamed_addr constant [21 x i8] c"has multiple digits\0A\00", align 1
define i32 @main(i32 %local_nargs, i8** %local_args) {
store i8** %local_args, i8*** @program.args
%1 = add i32 7, 0
%2 = add i32 2, 0
%3 = srem i32 %1, %2
%4 = add i32 0, 0
%5 = icmp eq i32 %3, %4
br i1 %5, label %then_3, label %else_3
then_3:
call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str_2, i64 0, i64 0))
br label %end_if_3
else_3:
call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str_3, i64 0, i64 0))
br label %end_if_3
end_if_3:
%8 = add i32 8, 0
%9 = add i32 4, 0
%10 = srem i32 %8, %9
%11 = add i32 0, 0
%12 = icmp eq i32 %10, %11
br i1 %12, label %then_4, label %else_4
then_4:
call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str_4, i64 0, i64 0))
br label %end_if_4
else_4:
br label %end_if_4
end_if_4:
%num = alloca i32
store i32 0, i32* %num
%14 = add i32 10, 0
store i32 %14, i32* %num
%15 = load i32, i32* %num
%16 = add i32 0, 0
%17 = icmp slt i32 %15, %16
br i1 %17, label %then_5, label %else_5
then_5:
%18 = load i32, i32* %num
call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str_int, i64 0, i64 0), i32 %18)
call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str_5, i64 0, i64 0))
br label %end_if_5
else_5:
%21 = load i32, i32* %num
%22 = add i32 10, 0
%23 = icmp slt i32 %21, %22
br i1 %23, label %then_6, label %else_6
then_6:
%24 = load i32, i32* %num
call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str_int, i64 0, i64 0), i32 %24)
call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str_6, i64 0, i64 0))
br label %end_if_6
else_6:
%27 = load i32, i32* %num
call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str_int, i64 0, i64 0), i32 %27)
call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str_7, i64 0, i64 0))
br label %end_if_6
end_if_6:
br label %end_if_5
end_if_5:
ret i32 0
}
