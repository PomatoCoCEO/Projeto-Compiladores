==19031== Memcheck, a memory error detector
==19031== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==19031== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==19031== Command: ./gocompiler --track-origins=yes
==19031== 
@_.str_int = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@_.str_float = private unnamed_addr constant [7 x i8] c"%.08f\0A\00", align 1
@_.str_string = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@_.false = private unnamed_addr constant [7 x i8] c"false\0A\00", align 1
@_.true = private unnamed_addr constant [6 x i8] c"true\0A\00", align 1
@_.new_line = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@program.args = global i8** null
declare i32 @atoi(i8*)
declare i32 @printf(i8*, ...)
define i32 @main(i32 %local_.nargs, i8** %local_.args) {
store i8** %local_.args, i8*** @program.args
%1 = fadd double 1.0e1, 0.0
call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @_.str_float, i64 0, i64 0), double %1)
call void @func.do_sth()
ret i32 0
ret i32 0
}
@_.str_0 = private unnamed_addr constant [5 x i8] c"Boo\0A\00", align 1
define void @func.do_sth() {
call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @_.str_0, i64 0, i64 0))
ret void
ret void
}
==19031== 
==19031== HEAP SUMMARY:
==19031==     in use at exit: 0 bytes in 0 blocks
==19031==   total heap usage: 268 allocs, 268 frees, 34,485 bytes allocated
==19031== 
==19031== All heap blocks were freed -- no leaks are possible
==19031== 
==19031== For lists of detected and suppressed errors, rerun with: -s
==19031== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
